/** –§—Ä–æ–Ω—Ç-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –æ—Ñ—Ñ–µ—Ä–æ–≤ */
class OfferFrontCtl {
    /**
     * 
     * @param {*} URL URL —Å–µ—Ä–≤–µ—Ä–∞
     * @param {*} offerTable —Ç–∞–±–ª–∏—Ü–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤
     * @param {*} csrfToken csrf-—Ç–æ–∫–µ–Ω
     */
    constructor(URL, csrfToken) {        
        this.URL = URL;
        this.csrfToken = csrfToken;
    }
    
    /**
     * –¥–æ–±–∞–≤–∏—Ç—å –æ—Ñ—Ñ–µ—Ä –≤ –ë–î
     * @param {*} form —Ñ–æ—Ä–º–∞ –Ω–æ–≤–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞
     * @param {*} msgHTMLElement HTML-—ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ 
     * @param {*} username HTML-—ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {*} event
     */
    add(form, msgHTMLElement, username, event) {
        event.preventDefault();
        let formData = new FormData(form);
        formData.append('user', username.textContent);
        
        fetch(this.URL, {method:'post', body:formData}).then(response => response.text()).then(data => {
            try {
                let offer = JSON.parse(data);
                if (offer.result === 1) {
                    event.target.reset();
                    msgHTMLElement.textContent = `${offer.offerName} –¥–æ–±–∞–≤–ª–µ–Ω`;
                } else {
                    msgHTMLElement.textContent = offer.error;
                }
            } catch(err) {
                console.log(data);
                msgHTMLElement.textContent = '–û—à–∏–±–∫–∞ –ë–î. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º–æ—Ç—Ä–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏';
            }
        })
    }

    remove(button) {
        let row = button.closest('tr'); 
        let id = row.getAttribute('data-id');
        let headers = {'X-CSRF-TOKEN': this.csrfToken.getAttribute('content')};
        fetch(`${this.URL}/${id}`, {method:'delete', headers: headers}).then(response => response.text()).then(data => {
            try{
                let rslt = JSON.parse(data);
                if (rslt.response === 1) {
                    row.remove();
                } else {
                    this.errorPrg.textContent = data;
                }
            } catch(e) {
                this.errorPrg.textContent = data;
            }
        })
    }

    /** —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å */
    setOfferStatus(row, inputStatus) {
        let data = new URLSearchParams();
        data.set('id', row.getAttribute('data-id'));
        data.set('status', inputStatus.checked);
        let headers = {'X-CSRF-TOKEN': this.csrfToken.getAttribute('content')};

        fetch(`${this.URL}/status`, {method:'post', headers: headers, body:data}).then(response => response.text()).then(rslt => {
            if (rslt != 1) {
                this.errorPrg.textContent = '–æ—à–∏–±–∫–∞ –î–ë';
                console.log(rslt);
            }
        })
    }

    /** –∫–ª–∏–∫ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã */
    static clickRow(offerTable, row) {
        if (row.classList.contains('table-offers__tr--active')) {
            row.classList.remove('table-offers__tr--active');
            row.querySelector('button').remove();
        } else {
            let activeRow = offerTable.querySelector('.table-offers__tr--active');
            if (activeRow) {
                activeRow.classList.remove('table-offers__tr--active');
                offerTable.querySelector('button').remove();
            }

            // –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
            row.innerHTML += "<button id='table-offers__btn-remove' title='–£–¥–∞–ª–∏—Ç—å'>üóë</button>";
            // —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            row.lastChild.onclick = e => offerFrontCtl.remove(e.target);
            // —Ñ–ª–∞–≥ –Ω–æ–≤–æ–π –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            row.classList.add('table-offers__tr--active');
        }
    }
}