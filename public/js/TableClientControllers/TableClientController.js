/** –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ç–∞–±–ª–∏—á–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä */
class TableClientController {
    /**
     * @param {*} URL URL –±—ç–∫-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
     * @param {*} table  —Ç–∞–±–ª–∏—Ü–∞ —Ç–µ–º
     * @param {*} msgElement –∏–Ω—Ñ–æ—ç–ª–µ–º–µ–Ω—Ç
     * @param {*} form —Ñ–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
     * @param {*} csrfToken csrf-—Ç–æ–∫–µ–Ω
     */
    constructor(URL, table, msgElement, form) {
        this.URL = URL;
        this.table = table;
        this.msgElement = msgElement;
        this.form = form;
        this.csrfToken = document.querySelector('meta[name="csrf-token"]');

        // —Ç–∞–±–ª–∏—Ü–∞
        if (this.table !== null) {
            this.table.querySelectorAll(`.${this.table.id}__tr`).forEach(
                (row) =>
                    (row.onclick = (e) => {
                        // –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∫–∏
                        if (e.target.tagName === "INPUT") {
                            this.setStatus(e.target.closest("tr"), e.target);
                        } else {
                            this.click(e.target.closest("tr"));
                        }
                    })
            );
        }

        // —Ñ–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        if (this.form !== null) {
            this.form.onsubmit = (event) => this.add(form, event);
        }
    }

    add(form, event) {
        event.preventDefault();
        let formData = new FormData(form);
        let headers = {
            "X-CSRF-TOKEN": this.csrfToken.getAttribute("content"),
        };

        fetch(this.URL, { method: "post", headers: headers, body: formData })
            .then((response) => response.text())
            .then((data) => {
                try {
                    data = JSON.parse(data);
                    if (data.result == 1) {
                        this.processData(form, data);
                    } else {
                        this.msgElement.textContent = data.description;
                    }
                } catch (e) {
                    if (data.includes("<title>Page Expired</title>")) {
                        window.open("/wrong-uri", "_self");
                    } else {
                        this.msgElement.textContent = data;
                    }
                }
            });
    }

    remove(row) {
        let headers = {
            "X-CSRF-TOKEN": this.csrfToken.getAttribute("content"),
        };

        fetch(`${this.URL}/${row.id}`, { method: "delete", headers: headers })
            .then((response) => response.text())
            .then((data) => {
                try {
                    data = JSON.parse(data);
                    if (data.result == 1) {
                        row.remove();
                        this.msgElement.textContent = "";
                    } else {
                        this.msgElement.textContent = data;
                    }
                } catch (err) {
                    if (data.includes("<title>Page Expired</title>")) {
                        window.open("/wrong-uri", "_self");
                    } else {
                        this.msgElement.textContent = err;
                        console.log(data);
                    }
                }
            });
    }

    click(row) {
        // –∫–ª–∏–∫ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–æ–∫—É
        if (row.classList.contains(`${this.table.id}__tr--active`)) {
            row.classList.remove(`${this.table.id}__tr--active`);
            row.querySelector("button").remove();
        } else {
            // –ø–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            let activeRow = this.table.querySelector(
                `.${this.table.id}__tr--active`
            );
            if (activeRow) {
                activeRow.querySelector("button").remove();
                activeRow.classList.remove(`${this.table.id}__tr--active`);
            }
            // –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
            row.innerHTML += `<button id='${this.table.id}__btn-remove' title='–£–¥–∞–ª–∏—Ç—å'>üóë</button>`;
            row.lastChild.onclick = (e) => this.remove(e.target.closest("tr"));
            row.classList.add(`${this.table.id}__tr--active`);
        }
    }

    /** –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ë–î */
    processData(data) {
        alert("–Ω–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ—Ç–æ–¥–∞ processData –∫–ª–∞—Å—Å–∞ TableFrontController");
    }
}
