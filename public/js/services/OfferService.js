/** –§—Ä–æ–Ω—Ç-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –æ—Ñ—Ñ–µ—Ä–æ–≤ */
class OfferService {
    /** –§—Ä–æ–Ω—Ç-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –æ—Ñ—Ñ–µ—Ä–æ–≤
     * @param {*} URL url –±—ç–∫-—á–∞—Å—Ç–∏
     * @param {*} offerTable —Ç–∞–±–ª–∏—Ü–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤
     * @param {*} addOfferForm —Ñ–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞
     * @param {*} msgPrg –ø–æ–ª–µ –æ—à–∏–±–æ–∫
     * @param {*} username –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {*} csrfToken csrf-—Ç–æ–∫–µ–Ω
     */
    constructor(URL, offerTable, addOfferForm, msgPrg, username, csrfToken) {        
        this.URL = URL;
        this.offerTable = offerTable;
        this.addOfferForm = addOfferForm;
        this.msgPrg = msgPrg;
        this.username = username;
        this.csrfToken = csrfToken;

        // —Ç–∞–±–ª–∏—Ü–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤
        if (this.offerTable !== null) {
            this.offerTable.querySelectorAll('.table-offers__tr').forEach(row => row.onclick = e => {
                    if (e.target.tagName === 'INPUT') {
                        this.setOfferStatus(e.target.closest('tr'), e.target);
                    } else {
                        this.clickRow(offerTable, e.target.closest('tr'));
                    }
                }
            );
        }

        // —Ñ–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞
        if (this.addOfferForm != null) {
            this.addOfferForm.onsubmit = event =>this.add(event);
        }
    }
    
    /** –¥–æ–±–∞–≤–∏—Ç—å –æ—Ñ—Ñ–µ—Ä –≤ –ë–î
     * @param {*} form —Ñ–æ—Ä–º–∞ –Ω–æ–≤–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞
     * @param {*} msgHTMLElement HTML-—ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ 
     * @param {*} username HTML-—ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {*} event
     */
    add(event) {
        event.preventDefault();
        let formData = new FormData(this.addOfferForm);
        formData.append('user', this.username);
        
        fetch(this.URL, {method:'post', body:formData}).then(response => response.text()).then(data => {
            try {
                let offer = JSON.parse(data);
                if (offer.result === 1) {
                    event.target.reset();
                    this.msgPrg.textContent = `${offer.offerName} –¥–æ–±–∞–≤–ª–µ–Ω`;
                } else {
                    this.msgPrg.textContent = offer.error;
                }
            } catch(err) {
                if (data.includes('<title>Page Expired</title>')) {
                    window.open('/wrong-uri', '_self');
                } else {
                    this.msgPrg.textContent = data;
                }
            }
        })
    }

    remove(button) {
        let row = button.closest('tr'); 
        let id = row.getAttribute('data-id');
        let headers = {'X-CSRF-TOKEN': this.csrfToken.getAttribute('content')};
        fetch(`${this.URL}/${id}`, {method:'delete', headers: headers}).then(response => response.text()).then(data => {
            try{
                let rslt = JSON.parse(data);
                if (rslt.response === 1) {
                    row.remove();
                } else {
                    this.errorPrg.textContent = data;
                }
            } catch(e) {
                if (data.includes('<title>Page Expired</title>')) {
                    window.open('/wrong-uri', '_self');
                } else {
                    this.msgPrg.textContent = data;
                }
            }
        })
    }

    /** –∫–ª–∏–∫ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã */
    clickRow(offerTable, row) {
        if (row.classList.contains('table-offers__tr--active')) {
            row.classList.remove('table-offers__tr--active');
            row.querySelector('button').remove();
        } else {
            let activeRow = offerTable.querySelector('.table-offers__tr--active');
            if (activeRow) {
                activeRow.classList.remove('table-offers__tr--active');
                offerTable.querySelector('button').remove();
            }

            // –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
            row.innerHTML += "<button id='table-offers__btn-remove' title='–£–¥–∞–ª–∏—Ç—å'>üóë</button>";
            // —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            row.lastChild.onclick = e => this.remove(e.target);
            // —Ñ–ª–∞–≥ –Ω–æ–≤–æ–π –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            row.classList.add('table-offers__tr--active');
        }
    }

    /** —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å */
    setOfferStatus(row, inputStatus) {
        let data = new URLSearchParams();
        data.set('id', row.getAttribute('data-id'));
        data.set('status', inputStatus.checked);
        let headers = {'X-CSRF-TOKEN': this.csrfToken.getAttribute('content')};

        let statusSwitch = row.querySelector("input[name='status']");
        fetch(`${this.URL}/status`, {method:'post', headers: headers, body:data}).then(response => response.text()).then(rslt => {
            if (rslt == 1) {
                statusSwitch.title = inputStatus.checked ? '–≤—ã–∫–ª—é—á–∏—Ç—å' : '–≤–∫–ª—é—á–∏—Ç—å';
            } else {
                this.errorPrg.textContent = "—Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞";
                console.log(rslt);
            }
        })
    }
}